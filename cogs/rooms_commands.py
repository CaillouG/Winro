import discord
import discord.utils
import asyncio
import re
from discord.ext.commands import has_permissions
from discord.ext import commands

class Rooms(commands.Cog):
    def __init__(self, bot):
        self.bot = bot 

    @commands.command(pass_context=True) #Cette commande permet aux membres d'un serveur de cr√©er des salons priv√©s
    @commands.cooldown(1, 7200, commands.BucketType.member)
    async def create(self, ctx, salon, time:float):
        name = salon.lower()
        room = discord.utils.get(ctx.guild.channels, name=name)
        category = discord.utils.get(ctx.guild.categories, name="Custom rooms")
        if time > 120 :
            await ctx.send("Vous ne pouvez que cr√©er un salon priv√© pendant au maximum 120 minutes !")
            ctx.command.reset_cooldown(ctx)
        elif room != None:
            await ctx.send(f"Ce nom est d√©j√† pris ! (Essayez avec {name}abc par exemple)")
            ctx.command.reset_cooldown(ctx)
        elif category is None:
            await ctx.send(f"Les salons priv√©s ne sont pas activ√©s sur ce serveur ! Faites ``w!setup rooms`` pour les activ√©s !")
            ctx.command.reset_cooldown(ctx) 
        elif not re.match("^[a-z]*$", name):
            await ctx.send("Le nom de votre salon priv√© ne peut contenir que des lettres de a √† z !")
            ctx.command.reset_cooldown(ctx) 
        elif len(name) > 20:
            await ctx.send("Les noms des salons priv√©s sont limit√©s √† 20 carct√®res !")
            ctx.command.reset_cooldown(ctx)
        else :
            user = ctx.author
            await ctx.guild.create_text_channel(name=name, category=category)
            membres = discord.utils.get(ctx.guild.roles, name="@everyone")  
            roomrole = await ctx.guild.create_role(name=name)
            await user.add_roles(roomrole)
            roomroverwrite = discord.PermissionOverwrite(read_messages=True, send_messages=True)
            membresoverwrite = discord.PermissionOverwrite(read_messages=False, send_messages=False)
            room = discord.utils.get(ctx.guild.channels, name=name)
            await room.set_permissions(roomrole, overwrite=roomroverwrite)
            await room.set_permissions(membres, overwrite=membresoverwrite)
            await room.send(f"{user.mention}, Votre salon priv√© viens d'√™tre cr√©er ! Faites ``w!add {roomrole} @[utilisateur]`` pour ajouter quelqu'un dans ce dernier !")
            embed=discord.Embed(    
                colour = discord.Colour.orange()
            )
            embed.set_author(name="Create :", icon_url="https://winro-bot.000webhostapp.com/images/minia.png")
            embed.add_field(name="Winro", value=f"{ctx.author.mention} a cr√©er le salon #{room} pour {round(time)} minutes", inline=True)
            embed.set_footer(text="Cr√©er par WhitePixels#9953")
            log = discord.utils.get(ctx.guild.channels, name="üì¢-logs")
            if log != None :
                await log.send(embed=embed)
            await asyncio.sleep((round(time)*60))
            await room.delete(reason="Temps expir√©")
            await roomrole.delete(reason="Temps expir√©")
            await user.send(f"``{user}``, votre salon priv√© ``{name}`` dans le serveur ``{ctx.guild}`` vient d'expirer !")

    @create.error
    async def create_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            msg = 'Cette commande poss√®de un cooldown, veuillez attendre {:.0f} secondes ! (Temps entre chaque commande : 2 heures)'.format(error.retry_after)
            await ctx.send(msg)
        elif isinstance(error, commands.MissingRequiredArgument): 
            await ctx.send("Pour utiliser cette commande, il faut sp√©cifier un nom de salon, ainsi que la dur√©e qu'il va mettre √† expir√© en minutes : ``w!create winro 120``")
            ctx.command.reset_cooldown(ctx)
        elif isinstance(error, commands.BadArgument): 
            await ctx.send("Pour utiliser cette commande, il faut sp√©cifier un nom de salon, ainsi que la dur√©e qu'il va mettre √† expir√© en minutes : ``w!create winro 120``")
            ctx.command.reset_cooldown(ctx)
        elif isinstance(error, commands.UnexpectedQuoteError): 
            await ctx.send("Indiquez un nom de salon priv√© sans caract√®res sp√©ciaux !")
        elif isinstance(error, commands.CommandInvokeError):
            await ctx.send("Une erreur est survenue lors de la cr√©ation de votre salon priv√©, veuillez r√©essayer (contactez un administrateur pour supprimer votre channel, sinon vous serez dans l'incapacit√© de r√©cr√©er le m√™me salon w!rdel winro)")
            ctx.command.reset_cooldown(ctx)
        else:
            raise error

    @commands.command(pass_context=True) #Cette commande permet au membres d'un salon priv√© d'ajouter d'autres personnes
    @commands.cooldown(1, 60, commands.BucketType.member)
    async def add(self, ctx, name, user:discord.Member):
        roomrole = discord.utils.get(ctx.guild.roles, name=name)
        room = discord.utils.get(ctx.guild.channels, name=name)
        if room != None:
            if roomrole in ctx.author.roles:
                await user.add_roles(roomrole)
                await room.send(f"{user} viens d'√™tre ajouter dans ce salon priv√© !")
            else:
                await ctx.send("Vous ne faites pas parti de ce salon priv√© !")
        else :
            await ctx.send ("Veuillez saisir un nom de salon priv√© correct !")

    @add.error
    async def add_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            msg = "Cette commande poss√®de un cooldown, veuillez attendre {:.0f} secondes ! (Temps entre chaque commande : 60 secondes)".format(error.retry_after)
            await ctx.send(msg)        
        elif isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("Pour utiliser cette commande, il faut sp√©cifier un nom de salon, ainsi que l'utilisateur que vous souhaiter ajouter dans votre salon priv√© : ``w!add winro @WhitePixels``")
            ctx.command.reset_cooldown(ctx)
        elif isinstance(error, commands.BadArgument):
            await ctx.send("Pour utiliser cette commande, il faut sp√©cifier un nom de salon, ainsi que l'utilisateur que vous souhaiter ajouter dans votre salon priv√© : ``w!add winro @WhitePixels``")
            ctx.command.reset_cooldown(ctx)
        else:
            raise error

    @commands.command(pass_context=True) #Cette commande permet √† un membre d'un salon priv√© de quitter ce dernier
    async def quit(self, ctx, caps):
        name = caps.lower()
        roomrole = discord.utils.get(ctx.guild.roles, name=name)
        room = discord.utils.get(ctx.guild.channels, name=name)
        if room != None:
            if roomrole in ctx.author.roles:
                await ctx.author.remove_roles(roomrole)
                await room.send(f"{ctx.author} viens de quitter ce salon...")
            else:
                await ctx.send("Vous ne faites pas parti de ce salon priv√© !")
        else :
            await ctx.send ("Veuillez saisir un nom de salon priv√© correct !")  

    @quit.error
    async def quit_error(self, ctx, error):  
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("Pour utiliser cette commande, il faut sp√©cifier le nom de salon priv√© que vous voulez quitter : ``w!quit winro``")
        elif isinstance(error, commands.BadArgument):
            await ctx.send("Pour utiliser cette commande, il faut sp√©cifier le nom de salon priv√© que vous voulez quitter : ``w!quit winro``")
        else:
            raise error

    @commands.command(pass_context=True) #Cette commande permet √† un membre avec la permission manage_channel de forcer la suppression d'un salon priv√© (suite √† une erreur par exemple)
    async def rdel(self, ctx, salon):
        if ctx.channel.permissions_for(ctx.author).manage_channels :
            name = salon.lower()
            roomrole = discord.utils.get(ctx.guild.roles, name=name)
            room = discord.utils.get(ctx.guild.channels, name=name)
            if room != None and roomrole != None:
                await room.delete(reason=f"D√©bug par {ctx.author}")
                await roomrole.delete(reason=f"D√©bug par {ctx.author}")
                await ctx.send(f"Salon {name} supprim√©")
            elif room != None :
                await room.delete(reason=f"D√©bug par {ctx.author}")
                await ctx.send(f"Le r√¥le {name} n'a pas √©t√© trouver, le salon {name} est supprim√© !")
            elif roomrole != None :
                await roomrole.delete(reason=f"D√©bug par {ctx.author}")
                await ctx.send(f"Le salon {name} n'a pas √©t√© trouver, le r√¥le {name} est supprim√© !")
            else :
                await ctx.send("Veuillez saisir un salon priv√© qui existe !")
        else : 
            await ctx.send("Vous n'avez pas la permission pour ex√©cuter cette commande ! (Permission(s) requise(s) : g√©rer les salons)")

    @rdel.error
    async def rdel_error(self, ctx, error):  
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("Pour utiliser cette commande, il faut sp√©cifier le nom de salon priv√© que vous voulez supprimer : ``w!rdel winro``")
        elif isinstance(error, commands.BadArgument):
            await ctx.send("Pour utiliser cette commande, il faut sp√©cifier le nom de salon priv√© que vous voulez supprimer : ``w!rdel winro``")
        else:
            raise error

def setup(bot):
    bot.add_cog(Rooms(bot))

